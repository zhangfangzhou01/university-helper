final Long userId = Long.valueOf(json.get("userId").toString());
final Set<String> keys = json.keySet();

List<ArrayList<Task>> taskss = new ArrayList<>();
List<Task> tasksResult;

if (keys.contains("userRelease")) {
    taskss.add(taskMapper.selectByUserRelease(userId));
} else if (keys.contains("userTake")) {
    taskss.add(taskMapper.selectByUserTake(userId));
} else if (keys.contains("type")) {
    if ("全部".equals(json.get("type"))) {
        taskss.add(taskMapper.selectAllType());
    } else {
        taskss.add(taskMapper.selectByType((String)json.get("type")));
    }
} else if (keys.contains("releaseTimeMax")) {
    taskss.add(taskMapper.selectReleaseTimeMax((LocalDateTime)json.get("releaseTimeMax")));
} else if (keys.contains("releaseTimeMin")) {
    taskss.add(taskMapper.selectReleaseTimeMin((LocalDateTime)json.get("releaseTimeMin")));
} else if (keys.contains("maxNumOfPeople")) {
    taskss.add(taskMapper.selectByMaxNumOfPeople((Integer)json.get("maxNumOfPeople")));
} else if (keys.contains("taskState")) {
    taskss.add(taskMapper.selectByTaskState((Integer)json.get("taskState")));
} else if (keys.contains("arrivalTimeMax")) {
    taskss.add(taskMapper.selectArrivalTimeMax((LocalDateTime)json.get("arrivalTimeMax")));
} else if (keys.contains("arrivalTimeMin")) {
    taskss.add(taskMapper.selectArrivalTimeMin((LocalDateTime)json.get("arrivalTimeMin")));
} else if (keys.contains("arrivalLocation")) {
    taskss.add(taskMapper.selectByArrivalLocation((String)json.get("arrivalLocation")));
} else if (keys.contains("targetLocation")) {
    taskss.add(taskMapper.selectByTargetLocation((String)json.get("targetLocation")));
} else if (keys.contains("transactionTimeMax")) {
    taskss.add(taskMapper.selectTransactionAmountMax((Integer)json.get("transactionAmountMax")));
} else if (keys.contains("transactionTimeMin")) {
    taskss.add(taskMapper.selectTransactionAmountMin((Integer)json.get("transactionAmountMin")));
}

// 做交集
tasksResult = taskss.stream()
        .reduce((tasks1, tasks2) -> {
            tasks1.retainAll(tasks2);
            return tasks1;
        }).orElse(new ArrayList<>());

return tasksResult;





if (keys.contains("userId")) {
    taskQueryWrapper.selectByUserRelease(userId);
} else if (keys.contains("userTake")) {
    taskQueryWrapper.selectByUserTake(userId);
} else if (keys.contains("type")) {
    if ("全部".equals(json.get("type"))) {
        taskQueryWrapper.selectAllType();
    } else {
        taskQueryWrapper.selectByType((String)json.get("type"));
    }
} else if (keys.contains("releaseTimeMax")) {
    taskQueryWrapper.selectReleaseTimeMax((LocalDateTime)json.get("releaseTimeMax"));
} else if (keys.contains("releaseTimeMin")) {
    taskQueryWrapper.selectReleaseTimeMin((LocalDateTime)json.get("releaseTimeMin"));
} else if (keys.contains("maxNumOfPeople")) {
    taskQueryWrapper.selectByMaxNumOfPeopleTake((Integer)json.get("maxNumOfPeople"));
} else if (keys.contains("taskState")) {
    taskQueryWrapper.selectByTaskState((Integer)json.get("taskState"));
} else if (keys.contains("arrivalTimeMax")) {
    taskQueryWrapper.selectArrivalTimeMax((LocalDateTime)json.get("arrivalTimeMax"));
} else if (keys.contains("arrivalTimeMin")) {
    taskQueryWrapper.selectArrivalTimeMin((LocalDateTime)json.get("arrivalTimeMin"));
} else if (keys.contains("arrivalLocation")) {
    taskQueryWrapper.selectByArrivalLocation((String)json.get("arrivalLocation"));
} else if (keys.contains("targetLocation")) {
    taskQueryWrapper.selectByTargetLocation((String)json.get("targetLocation"));
} else if (keys.contains("transactionTimeMax")) {
    taskQueryWrapper.selectTransactionAmountMax((Integer)json.get("transactionAmountMax"));
} else if (keys.contains("transactionTimeMin")) {
    taskQueryWrapper.selectTransactionAmountMin((Integer)json.get("transactionAmountMin"));
}